{"version":3,"sources":["components/three_components/objects/LowPolyJet.js","components/three_components/objects/Geo.js","components/three_components/objects/GroundPlane1.js","components/three_components/objects/AnimationExperiment.js","components/three_components/objects/WobblyTorus.js","components/three_components/objects/props/Ship.js","components/three_components/objects/props/TeslaTower1.js","components/three_components/scenes/Scene1.js","components/three_components/objects/LinesRobot.js","components/three_components/objects/OxygenContainer.js","components/three_components/objects/OxygenContainer2.js","components/three_components/objects/OxygenContainer3.js","components/three_components/objects/AbstractSphere.js","components/three_components/scenes/Scene2.js","components/three_components/scenes/Scene3.js","components/three_components/scenes/Scene4.js","components/three_components/scenes/Scene5.js","components/three_components/objects/Robot.js","store.js","components/three_components/ThreeCanvas.js","components/html_components/Menu.js","components/html_components/ButtonNavigation.js","components/html_components/VideoSandbox.js","components/html_components/HTMLContent.js","App.js","reportWebVitals.js","index.js"],"names":["filePath","window","location","href","useGLTF","preload","WobblyTorus","props","group","useRef","randomRotationOffset","Math","random","useEffect","current","position","x","animationOffset","z","rotation","y","useFrame","clock","t","sin","getElapsedTime","dispose","castShadow","receiveShadow","ref","args","MeshDistortMaterial","color","smoothShading","roughness","metalness","distort","speed","Texture","control1","texture","useMemo","value","min","max","PI","step","visible","attach","map","Image","url","THREE","load","Ship","useControls","opacity","TeslaTower","CameraDolly","isZoom","vec","state","camera","lerp","set","lookAt","updateProjectionMatrix","Scene","sceneIndex","useState","setZoom","cameraRef","color2","cameraRot","OrthographicCamera","makeDefault","zoom","onClick","active","console","log","OxygenContainer","materialProps","clearcoat","clearcoatRoughness","normalMap","useTexture","normalScale","transmission","transparent","side","nodes","materials","geometry","Container","material","GlassDome","Glass","Container001","OxygenContainer3","reflectivity","exposure","envMapIntensity","AbstractSphere","Icosphere003","scale","flatShading","factor","wireframe","hdri","hint","options","PerspectiveCamera","Stage","adjustCamera","intensity","contactShadow","shadows","OrbitControls","target","fallback","Environment","preset","background","useStore","create","videoPaths","videoIndex","switchVideos","selectScene0","selectScene1","selectScene2","selectScene3","bears","increasePopulation","removeAllBears","ThreeCanvas","scenes","Scene1","Scene2","Scene3","Scene4","Scene5","colorManagement","invalidateFrameloop","pixelRatio","React","createElement","Loader","MenuContent","setSelection","overlayContentStyle","top","width","textAlign","marginTop","fontSize","padding","buttonStyle","border","fontFamily","textDecoration","cursor","style","pointerEvents","height","zIndex","left","backgroundImage","overflowX","transition","reload","AboutMe","imagePath","className","src","alt","borderRadius","marginBottom","GetInTouch","justifyContent","dispay","display","HTMLContent","inMenu","setInMenu","selection","right","open","bind","this","strokeWidth","animationDuration","Navigation","App","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.328985f3.chunk.js","sourcesContent":["/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef, Suspense } from 'react'\r\nimport { useGLTF, useAnimations } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { useEffect } from 'react'\r\n\r\nconst filePath = window.location.href + '/models/LowPolyJet.glb'\r\n\r\nfunction TheModel() {\r\n  const groupRef = useRef()\r\n  const shipRef = useRef()\r\n  const targetRef = useRef()\r\n  const camPositionRef = useRef()\r\n\r\n  const { scene, animations } = useGLTF(filePath)\r\n\r\n  const mixer = new THREE.AnimationMixer(scene)\r\n\r\n  const prepAnimation = (rawData) => {\r\n    const animationClip = mixer.clipAction(rawData)\r\n    animationClip.setLoop( THREE.LoopOnce )\r\n    animationClip.clampWhenFinished = true\r\n    animationClip.play()\r\n  }\r\n\r\n  useEffect(() => {\r\n    const a1 = mixer.clipAction(animations[0])\r\n    const a2 = mixer.clipAction(animations[1])\r\n    const a3 = mixer.clipAction(animations[2])\r\n\r\n    a1.setLoop( THREE.LoopOnce )\r\n    a2.setLoop( THREE.LoopOnce )\r\n    a3.setLoop( THREE.LoopOnce )\r\n\r\n    a1.clampWhenFinished = true\r\n    a2.clampWhenFinished = true\r\n    a3.clampWhenFinished = true\r\n    \r\n    a1.play()\r\n    a2.play()\r\n    a3.play()\r\n\r\n    shipRef.current = groupRef.current.children.find(item => item.name === 'Ship')\r\n    targetRef.current = groupRef.current.children.find(item => item.name === 'CameraTarget')\r\n    camPositionRef.current = groupRef.current.children.find(item => item.name === 'CamPosition')\r\n  })\r\n\r\n  useFrame((state, delta) => {\r\n    mixer.update(delta);\r\n    state.camera.lookAt(targetRef.current.position)\r\n    state.camera.position.x = camPositionRef.current.position.x\r\n    state.camera.position.y = camPositionRef.current.position.y\r\n    state.camera.position.z = camPositionRef.current.position.z\r\n\r\n    // console.log(targetRef.current.position)\r\n\r\n    targetRef.current.scale.x = .001\r\n    targetRef.current.scale.y = .001\r\n    targetRef.current.scale.z = .001\r\n  });\r\n\r\n  return <primitive ref={groupRef} object={scene} position={[0, 0, 0]} />;\r\n}\r\n\r\nexport default function Model(props) {\r\n  return (\r\n    <group {...props} dispose={null}>\r\n      <Suspense fallback={null}>\r\n        <TheModel />\r\n      </Suspense>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)","import * as THREE from 'three'\r\nimport React, { useRef } from 'react'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { useGLTF, MeshDistortMaterial, Shadow } from '@react-three/drei'\r\n// import Text from './Text'\r\nimport mouseState from '../../../mouseState'\r\n\r\nconst filePath = window.location.href + '/models/geo.min.glb'\r\n\r\nexport default function Model(props) {\r\n  const group = useRef()\r\n  const shadow = useRef()\r\n  const { nodes } = useGLTF(filePath, true)\r\n\r\n  const xMoveFactor = 8\r\n  const yMoveFactor = 2\r\n\r\n  useFrame(({ clock }) => {\r\n    const t = (1 + Math.sin(clock.getElapsedTime() * 1.5)) / 2\r\n    const destinationY = (t / 4) - ((mouseState.mouse[1] / 2) * yMoveFactor) + .5\r\n    group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, destinationY, 0.05)\r\n\r\n    shadow.current.scale.y = shadow.current.scale.z = 1 + t\r\n    shadow.current.scale.x = 1.4 + (destinationY / 7) \r\n    shadow.current.position.x = THREE.MathUtils.lerp(group.current.position.x, (mouseState.mouse[0] / 2) * xMoveFactor, 0.05)\r\n\r\n    group.current.rotation.x = group.current.rotation.z += 0.005\r\n    group.current.position.x = THREE.MathUtils.lerp(group.current.position.x, (mouseState.mouse[0] / 2) * xMoveFactor, 0.05)\r\n  })\r\n\r\n  return (\r\n    <group {...props} dispose={null}>\r\n      <group ref={group}>\r\n        <mesh geometry={nodes.geo.geometry} castShadow receiveShadow>\r\n          <MeshDistortMaterial color=\"#ffffff\" flatShading roughness={1} metalness={0.5} factor={15} speed={5} />\r\n        </mesh>\r\n        <mesh geometry={nodes.geo.geometry}>\r\n          <meshBasicMaterial wireframe />\r\n        </mesh>\r\n      </group>\r\n      <Shadow ref={shadow} opacity={0.3} rotation-x={-Math.PI / 2} position={[0, -1.51, 0]} />\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath, true)\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef } from 'react'\r\nimport { useGLTF, useTexture } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\n\r\nconst filePath = window.location.href + '/models/GroundPlane1.glb'\r\n\r\nexport default function GroundPlane1(props) {\r\n  const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  const materialProps = {\r\n    clearcoat: 1.0,\r\n    clearcoatRoughness: 0,\r\n    metalness: 0.65,\r\n    roughness: 0.3,\r\n    color: 'blue',\r\n\r\n    transmission: 0.6,\r\n    transparent: true\r\n  }\r\n\r\n  const material1 = new THREE.MeshPhysicalMaterial(materialProps)\r\n\r\n  const group = useRef()\r\n  const { nodes, materials } = useGLTF(filePath)\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <group position={[0,.85, 0]}>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Plane.geometry}\r\n          material={materials.Mat1}\r\n          scale={[10,10,10]}\r\n        >\r\n\r\n        </mesh>\r\n        {/* <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_2.geometry}\r\n          material={materials.Mat2}\r\n        />\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_3.geometry}\r\n          material={materials.Mat3}\r\n        >\r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_3.geometry}\r\n          material={materials.Mat3}\r\n        >\r\n         <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} /> \r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_4.geometry}\r\n          material={materials.Mat4}\r\n        >\r\n          \r\n        </mesh> */}\r\n      </group>\r\n      {/* <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Cube002.geometry}\r\n        material={materials['Material.001']}\r\n        position={[0, .85, 0.03]}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} transmission={.9}/>\r\n\r\n      </mesh> */}\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef, Suspense } from 'react'\r\nimport { useGLTF, useAnimations } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from '@react-three/fiber'\r\n\r\nconst filePath = window.location.href + '/models/AnimationExperiment.glb'\r\n\r\nfunction TheModel() {\r\n  let mixer = null;\r\n  const { scene, animations } =  useGLTF(filePath)\r\n  mixer = new THREE.AnimationMixer(scene);\r\n\r\n  console.log(animations)\r\n\r\n  void mixer.clipAction(animations[0]).play();\r\n\r\n  useFrame((state, delta) => {\r\n    mixer.update(delta);\r\n  });\r\n\r\n  return <primitive object={scene} position={[0, 0, 0]} />;\r\n}\r\n\r\nexport default function Model(props) {\r\n  const group = useRef()\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <Suspense fallback={null}>\r\n        <TheModel />\r\n      </Suspense>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef } from 'react'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { useGLTF, MeshDistortMaterial } from '@react-three/drei'\r\nimport { useEffect } from 'react';\r\n\r\nexport default function WobblyTorus(props) {\r\n  const group = useRef()\r\n  const randomRotationOffset = Math.random() * 180\r\n\r\n  useEffect(() => {\r\n    group.current.position.x = props.animationOffset ? props.animationOffset[0] : 0\r\n    group.current.position.z = props.animationOffset ? props.animationOffset[2] : 0\r\n    group.current.rotation.x = randomRotationOffset\r\n    group.current.rotation.y = randomRotationOffset\r\n    group.current.rotation.z = randomRotationOffset\r\n  });\r\n\r\n  useFrame(({ clock }) => {\r\n    const t = (1 + Math.sin(clock.getElapsedTime() * 1.5)) / 2\r\n    group.current.position.y = (t / 3) + props.animationOffset ? props.animationOffset[1] : 0\r\n    group.current.rotation.x = group.current.rotation.z += 0.009\r\n  })\r\n\r\n\r\n  return (\r\n    <group  {...props} dispose={null}>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        ref={group}\r\n      >\r\n        <torusKnotBufferGeometry args={[.5, 0.25, 128, 32]} />\r\n        <MeshDistortMaterial\r\n          color={props.color}\r\n          smoothShading\r\n\r\n          roughness={0}\r\n          metalness={1}\r\n\r\n          distort={.1}\r\n          speed={1}\r\n        />\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport { Canvas } from \"react-three-fiber\";\r\nimport * as THREE from \"three\";\r\nimport { useControls } from 'leva'\r\n\r\nconst filePath = window.location.href + '/midjourney-raw/ship1.png'\r\n\r\nconst Texture = ({ texture }) => {\r\n  const options = useMemo(() => {\r\n    return {\r\n      x: { value: 0, min: 0, max: Math.PI * 2, step: 0.01 },\r\n      y: { value: 0, min: 0, max: Math.PI * 2, step: 0.01 },\r\n      z: { value: 0, min: 0, max: Math.PI * 2, step: 0.01 },\r\n      visible: true,\r\n      color: { value: 'lime' },\r\n    }\r\n  }, [])\r\n\r\n  // const defaultRotation = {\r\n  //   x: -0.7853981633974484,\r\n  //   y: 6.385428887820153e-38,\r\n  //   z: 6.385428887820154e-38\r\n  // }\r\n\r\n  const defaultRotation = {\r\n    x: -0.7853981633974484,\r\n    y: 0.615479708461653,\r\n    z: 0.5235987754704757\r\n  }\r\n\r\n  const defaultPosition = {\r\n    x: -10,\r\n    y: 0,\r\n    z: -4,\r\n  }\r\n\r\n  const useControls = false\r\n  let control1 = {}\r\n\r\n  // control1 = useControls({\r\n  //   color: 'green',\r\n  //   rotation: {\r\n  //     ...defaultRotation\r\n  //   },\r\n  //   position: {\r\n  //     ...defaultPosition\r\n  //   }\r\n  // })\r\n  \r\n  control1 = {\r\n    rotation: defaultRotation,\r\n    position: defaultPosition\r\n  }\r\n\r\n  return (\r\n    <mesh\r\n    position={[control1.position.x, control1.position.y, control1.position.z]}\r\n      rotation={[control1.rotation.x, control1.rotation.y, control1.rotation.z]}\r\n    >\r\n      <planeBufferGeometry\r\n        attach=\"geometry\"\r\n        args={[15, 14]}\r\n      />\r\n      <meshBasicMaterial attach=\"material\" map={texture} />\r\n    </mesh>\r\n  );\r\n};\r\nconst Image = ({ url }) => {\r\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\r\n  return <Texture texture={texture} />;\r\n};\r\n\r\nexport default function Ship() {\r\n  return (\r\n    <Image url={filePath} />\r\n  );\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport { Canvas } from \"react-three-fiber\";\r\nimport * as THREE from \"three\";\r\nimport { useControls } from 'leva'\r\n\r\nconst filePath = window.location.href + '/midjourney-raw/teslaTower.png'\r\n\r\nconst Texture = ({ texture }) => {\r\n  const options = useMemo(() => {\r\n    return {\r\n      x: { value: 0, min: 0, max: Math.PI * 2, step: 0.01 },\r\n      y: { value: 0, min: 0, max: Math.PI * 2, step: 0.01 },\r\n      z: { value: 0, min: 0, max: Math.PI * 2, step: 0.01 },\r\n      visible: true,\r\n      color: { value: 'lime' },\r\n    }\r\n  }, [])\r\n\r\n  const defaultRotation = {\r\n    x: -0.7853981633974484,\r\n    y: 0.615479708461653,\r\n    z: 0.5235987754704757\r\n  }\r\n\r\n  // const defaultRotation = {\r\n  //   x: -0.7853981633974484,\r\n  //   y: 6.385428887820153e-38,\r\n  //   z: 6.385428887820154e-38\r\n  // }\r\n\r\n  const defaultPosition = {\r\n    x: 6,\r\n    y: 0,\r\n    z: -10,\r\n  }\r\n\r\n  const control1 = useControls({\r\n    color: 'green',\r\n    rotation: {\r\n      ...defaultRotation\r\n    },\r\n    position: {\r\n      ...defaultPosition\r\n    }\r\n  })\r\n\r\n  return (\r\n    <mesh\r\n    position={[control1.position.x, control1.position.y, control1.position.z]}\r\n      rotation={[control1.rotation.x, control1.rotation.y, control1.rotation.z]}\r\n    >\r\n      <planeBufferGeometry\r\n        attach=\"geometry\"\r\n        args={[15, 14]}\r\n      />\r\n      <meshBasicMaterial attach=\"material\" map={texture} opacity={.5} />\r\n    </mesh>\r\n  );\r\n};\r\nconst Image = ({ url }) => {\r\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\r\n  return <Texture texture={texture} />;\r\n};\r\n\r\nexport default function TeslaTower() {\r\n  return (\r\n    <Image url={filePath} />\r\n  );\r\n}\r\n","import LowPolyJet from '../objects/LowPolyJet'\r\nimport Box from '../objects/Box'\r\nimport Geo from '../objects/Geo'\r\nimport * as THREE from 'three'\r\n\r\nimport GroundPlane1 from '../objects/GroundPlane1'\r\nimport AnimationExperiment from '../objects/AnimationExperiment'\r\nimport WobblyTorus from '../objects/WobblyTorus'\r\nimport { OrbitControls, Stats, Stage, Loader, OrthographicCamera, PerspectiveCamera, Environment, useTexture, Plane } from '@react-three/drei';\r\nimport { useFrame } from '@react-three/fiber';\r\nimport React, { useState, useEffect, useRef, Suspense } from 'react';\r\nimport { useControls } from \"leva\"\r\nimport Ship from '../objects/props/Ship'\r\nimport TeslaTower from '../objects/props/TeslaTower1'\r\n\r\n\r\nconst CameraDolly = ({ isZoom }) => {\r\n  const vec = new THREE.Vector3()\r\n\r\n  useFrame((state) => {\r\n    const step = 0.1\r\n    const x = isZoom ? 0 : 5\r\n    const y = isZoom ? 10 : 5\r\n    const z = isZoom ? 10 : 5\r\n\r\n    state.camera.position.lerp(vec.set(x, y, z), step)\r\n    state.camera.lookAt(0, 0, 0)\r\n    state.camera.updateProjectionMatrix()\r\n  })\r\n\r\n  return null\r\n}\r\n\r\nexport default function Scene({ sceneIndex }) {\r\n  const [isZoom, setZoom] = useState(false)\r\n  const toggleZoom = () => {\r\n    setZoom((active) => !active)\r\n    console.log(cameraRef)\r\n    console.log(cameraRef.current.rotation)\r\n\r\n  }\r\n  const cameraRef = useRef()\r\n\r\n  const control1 = useControls({\r\n    color2: 'green',\r\n    cameraRot: {\r\n      x: 0,\r\n      y: 0,\r\n      z: 0\r\n    }\r\n  })\r\n\r\n//   const onClickScene = (event) => {\r\n//     console.log('onClick scene listener: ', e)\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     // attach callbacks to clicks thanks to three.interaction\r\n//     scene.on('click', onClickScene)\r\n//     return () => scene.on('click', () => {})\r\n// })\r\n\r\n  return (\r\n    <>\r\n      {/* <PerspectiveCamera makeDefault position={[0, 2, 20]} /> */}\r\n\r\n      <Ship />\r\n      <TeslaTower/>\r\n\r\n      <OrthographicCamera makeDefault zoom={30} ref={cameraRef} />\r\n\r\n      <gridHelper args={[10, 10, `white`, `gray`]} />\r\n\r\n      <mesh onClick={toggleZoom} position={[0, 1, 0]}>\r\n        <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\r\n        <meshNormalMaterial attach=\"material\" />\r\n      </mesh>\r\n      <CameraDolly isZoom={isZoom} />\r\n\r\n      {/* <GroundPlane1/>\r\n        <Geo position={[0,0,0]}/> */}\r\n      {/* <Box position={[0,0,0]}/> */}\r\n      {/* <Box position={[0,-10,0]}/> */}\r\n      {/* <Plane position={[0,0,0]}/> */}\r\n      {/* <CameraDolly isZoom={isZoom} />\r\n        <Suspense fallback={null}>\r\n          <Environment preset={'city'} background={false} />\r\n        </Suspense> */}\r\n      {/* </Stage> */}\r\n    </>\r\n  );\r\n}\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef, useMemo } from 'react'\r\nimport { useGLTF, useTexture } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from \"@react-three/fiber\"\r\n\r\nconst filePath = window.location.href + '/models/Robot.glb'\r\n\r\nexport default function LinesRobot(props) {\r\n  const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  const materialProps = {\r\n    clearcoat: 1.0,\r\n    clearcoatRoughness: 0,\r\n    metalness: 0.65,\r\n    roughness: 0.3,\r\n    color: 'blue',\r\n    normalMap: texture,\r\n    normalScale: [0.3, 0.3],\r\n    'normalMap-repeat': [30, 30],\r\n    transmission: 0.6,\r\n    transparent: true\r\n  }\r\n\r\n  const group = useRef()\r\n  const { nodes, materials } = useGLTF(filePath)\r\n\r\n  const edges = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_1.geometry), [nodes])\r\n  const edges1 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_2.geometry), [nodes])\r\n  const edges2 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_3.geometry), [nodes])\r\n  const edges3 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_3.geometry), [nodes])\r\n\r\n  // Rotate mesh every frame, this is outside of React without overhead\r\n  useFrame(() => {\r\n    if (group.current != null) {\r\n      group.current.rotation.y = group.current.rotation.y += 0.003\r\n    }\r\n  })\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <group position={[0, .85, 0]}>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_1.geometry}\r\n          material={materials.Mat1}\r\n        >\r\n        </mesh>\r\n        <lineSegments geometry={edges}>\r\n          <lineBasicMaterial color=\"black\" />\r\n        </lineSegments>\r\n        <lineSegments geometry={edges1}>\r\n          <lineBasicMaterial color=\"black\" />\r\n        </lineSegments>\r\n        <lineSegments geometry={edges2}>\r\n          <lineBasicMaterial color=\"black\"  />\r\n        </lineSegments>\r\n        <lineSegments geometry={edges3}>\r\n          <lineBasicMaterial color=\"black\" />\r\n        </lineSegments>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_2.geometry}\r\n          material={materials.Mat2}\r\n        />\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_3.geometry}\r\n          material={materials.Mat3}\r\n        >\r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_3.geometry}\r\n          material={materials.Mat3}\r\n        >\r\n          <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} />\r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_4.geometry}\r\n          material={materials.Mat4}\r\n        >\r\n\r\n        </mesh>\r\n      </group>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Cube002.geometry}\r\n        material={materials['Material.001']}\r\n        position={[0, .85, 0.03]}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} transmission={.9} />\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","import React, { useRef, useMemo } from 'react'\r\nimport { useGLTF, useTexture } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from \"@react-three/fiber\"\r\nconst filePath = window.location.href + '/models/OxygenContainer2.glb'\r\n\r\nexport default function OxygenContainer(props) {\r\n  const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  const materialProps = {\r\n    clearcoat: 1.0,\r\n    clearcoatRoughness: 0,\r\n    metalness: 0.65,\r\n    roughness: 0.3,\r\n    normalMap: texture,\r\n    normalScale: [0.3, 0.3],\r\n    transmission: 0.99,\r\n    transparent: true,\r\n    side: THREE.DoubleSide,\r\n    opacity: 0.2,\r\n    color: 'teal'\r\n  }\r\n\r\n  const group = useRef()\r\n\r\n  const { nodes, materials } = useGLTF(filePath)\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container.geometry}\r\n        material={materials['Material.003']}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.GlassDome.geometry}\r\n        material={materials.Glass}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps}/>\r\n      </mesh>\r\n      \r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container001.geometry}\r\n        material={materials['Material.002']}\r\n        position={[0, 0.01, 0]}\r\n      />\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","import React, { useRef, useMemo } from 'react'\r\nimport { useGLTF, useTexture } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from \"@react-three/fiber\"\r\nconst filePath = window.location.href + '/models/OxygenContainer2.glb'\r\n\r\nexport default function OxygenContainer2(props) {\r\n  const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  const materialProps = {\r\n    clearcoat: 1.0,\r\n    clearcoatRoughness: 0.2,\r\n    metalness: 0.0,\r\n    roughness: 0.1,\r\n    color: 'teal',\r\n    // color: '#195e23',\r\n    normalMap: texture,\r\n    normalScale: [0.3, 0.3],\r\n    'normalMap-wrapS': THREE.RepeatWrapping,\r\n    'normalMap-wrapT': THREE.RepeatWrapping,\r\n    'normalMap-repeat': [90, 90],\r\n    'normalMap-anisotropy': 16,\r\n    transmission: 0.93,\r\n    transparent: true,\r\n    opacity: 1\r\n  }\r\n\r\n  const group = useRef()\r\n\r\n  const { nodes, materials } = useGLTF(filePath)\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container.geometry}\r\n        material={materials['Material.003']}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.GlassDome.geometry}\r\n        material={materials.Glass}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps}  />\r\n      </mesh>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container001.geometry}\r\n        material={materials['Material.002']}\r\n        position={[0, 0.01, 0]}\r\n      />\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","import React, { useRef, useMemo } from 'react'\r\nimport { useGLTF, useTexture } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from \"@react-three/fiber\"\r\nconst filePath = window.location.href + '/models/OxygenContainer2.glb'\r\n\r\nexport default function OxygenContainer3(props) {\r\n  const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  const materialProps = {\r\n    // clearcoat: 1.0,\r\n    // clearcoatRoughness: 0.2,\r\n    metalness: 0.0,\r\n    roughness: 0.0,\r\n    color: '#6cccf5',\r\n    // color: 'blue',\r\n    normalMap: texture,\r\n    normalScale: [0.3, 0.3],\r\n    reflectivity: .5,\r\n    transmission: .4,\r\n    transparent: true,\r\n    opacity: 1,\r\n    exposure: 1,\r\n    envMapIntensity: 1\r\n  }\r\n\r\n  const group = useRef()\r\n\r\n  const { nodes, materials } = useGLTF(filePath)\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <mesh \r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container.geometry}\r\n        material={materials['Material.003']}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.GlassDome.geometry}\r\n        material={materials.Glass}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps}  />\r\n      </mesh>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container001.geometry}\r\n        material={materials['Material.002']}\r\n        position={[0, 0.01, 0]}\r\n      />\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef } from 'react'\r\nimport { useGLTF, MeshDistortMaterial } from '@react-three/drei'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { useEffect } from 'react';\r\n\r\nconst filePath = window.location.href + '/models/AbstractSphere.glb'\r\n\r\nexport default function AbstractSphere(props) {\r\n  const group = useRef()\r\n  const { nodes } = useGLTF(filePath)\r\n  const randomRotationOffset = Math.random() * 180\r\n\r\n  useEffect(() => {\r\n    group.current.position.x = props.animationOffset ? props.animationOffset[0] : 0\r\n    group.current.position.z = props.animationOffset ? props.animationOffset[2] : 0\r\n    group.current.rotation.x = randomRotationOffset\r\n    group.current.rotation.y = randomRotationOffset\r\n    group.current.rotation.z = randomRotationOffset\r\n  });\r\n\r\n  useFrame(({ clock }) => {\r\n    const t = (1 + Math.sin(clock.getElapsedTime() * 1.5)) / 2\r\n    group.current.position.y = (t / 3) + props.animationOffset ? props.animationOffset[1] : 0\r\n    group.current.rotation.x = group.current.rotation.z += 0.005\r\n  })\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null} position={[0,1.2,0]}>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Icosphere003.geometry}\r\n        material={nodes.Icosphere003.material}\r\n        scale={[1.06, 1.06, 1.06]}\r\n      >\r\n        <mesh geometry={nodes.Icosphere003.geometry} castShadow receiveShadow>\r\n          <MeshDistortMaterial color={props.color} flatShading roughness={1} metalness={0.5} factor={15} speed={5} />\r\n        </mesh>\r\n        <mesh geometry={nodes.Icosphere003.geometry}>\r\n          <meshBasicMaterial wireframe color={props.color}/>\r\n        </mesh>\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","import LinesRobot from '../objects/LinesRobot'\r\nimport OxygenContainer from '../objects/OxygenContainer'\r\nimport OxygenContainer2 from '../objects/OxygenContainer2'\r\nimport OxygenContainer3 from '../objects/OxygenContainer3'\r\nimport WobblyTorus from '../objects/WobblyTorus'\r\nimport AbstractSphere from '../objects/AbstractSphere'\r\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera, Environment, useTexture } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport React, { useState, useEffect, Suspense } from 'react';\r\nimport { useControls } from \"leva\"\r\n\r\nexport default function Scene({ sceneIndex }) {\r\n  const environmentControls = {\r\n    hint: 'HDRI Lighting',\r\n    options: [\r\n      'city',\r\n      'sunset',\r\n      'forest',\r\n    ],\r\n    value: 'city',\r\n  }\r\n\r\n  const { hdri } = useControls('environment/lighting', { hdri: environmentControls })\r\n\r\n  return (\r\n    <>\r\n      <PerspectiveCamera makeDefault position={[0, 4, 13]} />\r\n\r\n      <Stage adjustCamera={false} intensity={.5} contactShadow={true} shadows={true}>\r\n        <OrbitControls target={[1, 1, 0]} />\r\n\r\n        <OxygenContainer3 position={[0, 0, 0]}/>\r\n        <WobblyTorus position={[0, 2.5, 0]} rotation={[0, 90, 0]} />\r\n\r\n        <Suspense fallback={null}>\r\n          <Environment preset={hdri} background={false} />\r\n        </Suspense>\r\n      </Stage>\r\n    </>\r\n  );\r\n}\r\n\r\n","import LinesRobot from '../objects/LinesRobot'\r\nimport OxygenContainer from '../objects/OxygenContainer'\r\nimport OxygenContainer2 from '../objects/OxygenContainer2'\r\nimport OxygenContainer3 from '../objects/OxygenContainer3'\r\nimport AbstractSphere from '../objects/AbstractSphere'\r\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport React, { useState, useEffect, Suspense } from 'react';\r\n\r\nexport default function Scene({ sceneIndex }) {\r\n  const environmentOptions = [\r\n    'studio',\r\n    'sunset',\r\n    'dawn',\r\n    'night',\r\n    'warehouse',\r\n    'forest',\r\n    'apartment',\r\n    'city',\r\n    'park',\r\n    'lobby',\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <PerspectiveCamera makeDefault position={[0, 4, 13]} />\r\n      <OrbitControls target={[1, 1, 0]} />\r\n\r\n      <Stage adjustCamera={false} intensity={.5} contactShadow={true} shadows={true}>\r\n        <OxygenContainer position={[-6, 0, 0]} rotation={[0, 90, 0]} />\r\n        <AbstractSphere animationOffset={[-6, 2, 0]} color=\"black\" />\r\n        <AbstractSphere scale={[0.7, 0.7, 0.7]} animationOffset={[-6, 2, 0]} color=\"black\" />\r\n      </Stage>\r\n    </>\r\n  );\r\n}\r\n\r\n","import LinesRobot from '../objects/LinesRobot'\r\nimport OxygenContainer from '../objects/OxygenContainer'\r\nimport OxygenContainer2 from '../objects/OxygenContainer2'\r\nimport OxygenContainer3 from '../objects/OxygenContainer3'\r\nimport AbstractSphere from '../objects/AbstractSphere'\r\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport React, { useState, useEffect, Suspense } from 'react';\r\n\r\nexport default function Scene({ sceneIndex }) {\r\n  const environmentOptions = [\r\n    'park',\r\n    'sunset',\r\n    'dawn',\r\n    'night',\r\n    'warehouse',\r\n    'forest',\r\n    'apartment',\r\n    'studio',\r\n    'city',\r\n    'lobby',\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <PerspectiveCamera makeDefault position={[0, 4, 13]} />\r\n      <OrbitControls target={[1, 1, 0]} />\r\n\r\n      <Stage adjustCamera={false} intensity={.5} contactShadow={true} shadows={true}>\r\n        <OxygenContainer3 rotation={[0, 90, 0]} position={[12, 0, 0]} />\r\n        <AbstractSphere scale={[0.7, 0.7, 0.7]} animationOffset={[6, 2, 0]} color=\"red\" />\r\n      </Stage>\r\n    </>\r\n  );\r\n}\r\n\r\n","\r\n\r\nimport OxygenContainer2 from '../objects/OxygenContainer2'\r\nimport Box from '../objects/Box'\r\nimport AbstractSphere from '../objects/AbstractSphere'\r\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera, Environment, useTexture, Reflector } from '@react-three/drei';\r\nimport { Canvas, useThree } from '@react-three/fiber';\r\nimport React, { useState, useEffect, Suspense, useRef, useMemo } from 'react';\r\nimport * as THREE from 'three'\r\nimport { MeshPhysicalMaterial } from 'three';\r\n\r\n// function MidsectionPlane() {\r\n//   const plane = useRef()\r\n\r\n//   const { viewport, aspect } = useThree()\r\n//   const texture = useTexture(window.location.href + '/images/majestic_deer_Benoît_FLEURY.png')\r\n//   const alpha = useTexture(window.location.href + '/images/AlphamapTest.gif')\r\n//   useMemo(() => (texture.minFilter = THREE.LinearFilter), [])\r\n\r\n//   const adaptedHeight = 3800 * (aspect > 5000 / 3800 ? viewport.width / 5000 : viewport.height / 3800)\r\n//   const adaptedWidth = 5000 * (aspect > 5000 / 3800 ? viewport.width / 5000 : viewport.height / 3800)\r\n\r\n//   return (\r\n//     <>\r\n//       <mesh ref={plane} position={[0, 4, -8]} scale={[adaptedWidth + 1, adaptedHeight + 0.5, 1]}>\r\n//         <planeBufferGeometry attach=\"geometry\" args={[1, 1]} />\r\n//         <meshBasicMaterial\r\n//           attach=\"material\"\r\n//           map={texture}\r\n//           transparent={true}\r\n//         />\r\n//         {/* <meshBasicMaterial\r\n//           attach=\"material\"\r\n//           map={texture}\r\n//           alphaMap={alpha}\r\n//           transparent={true}\r\n//         /> */}\r\n//       </mesh>\r\n\r\n//       {/* <mesh ref={plane} position={[0, 4, -4]} scale={[adaptedWidth + 2, adaptedHeight + 1.5, 2]}>\r\n//         <planeBufferGeometry attach=\"geometry\" args={[1, 1]} />\r\n//         <meshBasicMaterial attach=\"material\" map={texture} alphaMap={alpha} transparent={true} />\r\n//       </mesh> */}\r\n//     </>\r\n//   )\r\n// }\r\n\r\n// function ReflectorPlane() {\r\n//   return (\r\n//     <Reflector\r\n//     position={[0, 0, -2]}\r\n//       rotation={[-Math.PI / 2, 0, 0]}\r\n//       args={[15, 15]}\r\n//       resolution={1024}\r\n//       mirror={0.001}\r\n//       mixBlur={1.0}\r\n//       mixBlur={0}\r\n//       mixStrength={1}\r\n//       depthScale={1}\r\n//       minDepthThreshold={0.9}\r\n//       maxDepthThreshold={1}\r\n//       depthToBlurRatioBias={0.25}\r\n//       distortion={0}\r\n//       opacity={.5}\r\n//       transparent={true}\r\n//       // distortionMap={distortionTexture}\r\n//       debug={0}\r\n//     >\r\n//       {(Material, props) => <Material color=\"#808F8D\" metalness={1} normalScale={[1, 1]} {...props} />}\r\n//     </Reflector>\r\n//   )\r\n// }\r\n\r\nexport default function Scene() {\r\n  return (\r\n    <>\r\n      <Stage adjustCamera={false} contactShadow={true} shadows={true} >\r\n        {/* <MidsectionPlane />\r\n        <ReflectorPlane /> */}\r\n        <Suspense fallback={null}>\r\n          <Environment preset={'forest'} background={false} />\r\n        </Suspense>\r\n      </Stage>\r\n    </>\r\n  );\r\n}\r\n\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef } from 'react'\r\nimport { useGLTF, useTexture } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\n\r\nconst filePath = window.location.href + '/models/Robot.glb'\r\n\r\nexport default function Robot(props) {\r\n  const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  const materialProps = {\r\n    clearcoat: 1.0,\r\n    clearcoatRoughness: 0,\r\n    metalness: 0.65,\r\n    roughness: 0.3,\r\n    color: 'blue',\r\n    normalMap: texture,\r\n    normalScale: [0.3, 0.3],\r\n    transmission: 0.6,\r\n    transparent: true\r\n  }\r\n\r\n  const material1 = new THREE.MeshPhysicalMaterial(materialProps)\r\n\r\n  const group = useRef()\r\n  const { nodes, materials } = useGLTF(filePath)\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <group position={[0,.85, 0]}>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_1.geometry}\r\n          material={materials.Mat1}\r\n        >\r\n\r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_2.geometry}\r\n          material={materials.Mat2}\r\n        />\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_3.geometry}\r\n          material={materials.Mat3}\r\n        >\r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_3.geometry}\r\n          material={materials.Mat3}\r\n        >\r\n         <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} /> \r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_4.geometry}\r\n          material={materials.Mat4}\r\n        >\r\n          \r\n        </mesh>\r\n      </group>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Cube002.geometry}\r\n        material={materials['Material.001']}\r\n        position={[0, .85, 0.03]}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} transmission={.9}/>\r\n\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","import create from 'zustand'\r\n\r\nconst useStore = create(set => ({\r\n  videoPaths: [\r\n    window.location.href + '/video/composite/abstract4.mp4',\r\n    window.location.href + '/video/composite/abstract1.mp4'\r\n  ],\r\n  videoIndex: 0,\r\n  switchVideos: () => set(state => ({ \r\n    // videoIndex: ((state.videoIndex + 1)) \r\n    // videoIndex: ((state.videoIndex + 1) % (state.videoPaths.length)) \r\n  })),\r\n\r\n  sceneIndex: 0,\r\n  selectScene0: () => set(() => {\r\n    return { sceneIndex: 0 }\r\n  }),\r\n  selectScene1: () => set(() => ({ sceneIndex: 1 })),\r\n  selectScene2: () => set(() => ({ sceneIndex: 2 })),\r\n  selectScene3: () => set(() => ({ sceneIndex: 3 })),\r\n  bears: 0,\r\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\r\n  removeAllBears: () => set({ bears: 0 })\r\n}))\r\n\r\nexport default useStore","import { OrbitControls, Loader, PerspectiveCamera } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport React, { Suspense } from 'react';\r\n\r\nimport Scene1 from './scenes/Scene1';\r\nimport Scene2 from './scenes/Scene2';\r\nimport Scene3 from './scenes/Scene3';\r\nimport Scene4 from './scenes/Scene4';\r\nimport Scene5 from './scenes/Scene5';\r\nimport Scene6 from './scenes/Scene6';\r\nimport Scene7 from './scenes/Scene7';\r\n\r\nimport useStore from '../../store'\r\n\r\nexport default function ThreeCanvas() {\r\n  const scenes = [\r\n    // Scene7,\r\n    // Scene6,\r\n    Scene1,\r\n    Scene2,\r\n    Scene3,\r\n    Scene4,\r\n    Scene5,\r\n  ]\r\n\r\n  const sceneIndex = useStore(state => state.sceneIndex)\r\n\r\n  return (\r\n    <>\r\n      <Canvas colorManagement={true} invalidateFrameloop pixelRatio={[1, 2]}>\r\n\r\n        <Suspense fallback={null}>\r\n          {React.createElement(scenes[sceneIndex])}\r\n        </Suspense>\r\n\r\n        {/* <Stats /> */}\r\n\r\n\r\n\r\n      </Canvas>\r\n\r\n      <Loader />\r\n    </>\r\n  );\r\n}\r\n\r\n","// Header\r\n// This contains the menu.\r\n\r\nimport { HamburgerButton } from \"react-hamburger-button\";\r\nimport React, { useState } from 'react';\r\n\r\nfunction IconList() {\r\n  const iconwidth = '32px'\r\n\r\n  const images = [\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/vue/vue.png',\r\n      alt: 'Vue',\r\n      link: ''\r\n    },\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/fbceb94436312b6dacde68d122a5b9c7d11f9524/topics/aws/aws.png',\r\n      alt: 'Amazon Web Services',\r\n      link: ''\r\n    },\r\n\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/javascript/javascript.png',\r\n      alt: 'JavaScript',\r\n      link: ''\r\n    },\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/react/react.png',\r\n      alt: 'React',\r\n      link: ''\r\n    },\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/graphql/graphql.png',\r\n      alt: 'GraphQL',\r\n      link: ''\r\n    },\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/html/html.png',\r\n      alt: '',\r\n      link: ''\r\n    },\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/mongodb/mongodb.png',\r\n      alt: '',\r\n      link: ''\r\n    },\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/css/css.png',\r\n      alt: '',\r\n      link: ''\r\n    },\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/nodejs/nodejs.png',\r\n      alt: '',\r\n      link: ''\r\n    },\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/sass/sass.png',\r\n      alt: '',\r\n      link: ''\r\n    },\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/rails/rails.png',\r\n      alt: '',\r\n      link: ''\r\n    },\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/postgresql/postgresql.png',\r\n      alt: '',\r\n      link: ''\r\n    },\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/git/git.png',\r\n      alt: '',\r\n      link: ''\r\n    },\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/terminal/terminal.png',\r\n      alt: 'Terminal',\r\n      link: ''\r\n    },\r\n\r\n\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/sql/sql.png',\r\n      alt: 'SQL',\r\n      link: ''\r\n    },\r\n\r\n    {\r\n      src: 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/visual-studio-code/visual-studio-code.png',\r\n      alt: 'VS Code',\r\n      link: ''\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", flexWrap: \"wrap\", width: \"100%\", justifyContent: \"space-around\", alignContent: 'space-between' }}>\r\n      {images.map(function (item, index) {\r\n        return <img key={index} align=\"left\" alt={item.alt} width={iconwidth} src={item.src} />\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction MenuContent({ setSelection }) {\r\n  const overlayStyle = {\r\n    pointerEvents: \"auto\",\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    position: \"fixed\",\r\n    zIndex: \"1\",\r\n    top: \"0\",\r\n    left: \"0\",\r\n    backgroundImage: \"linear-gradient(90deg, #134E5E 10%, #71B280 90%)\",\r\n    overflowX: \"hidden\",\r\n    transition: \"0.1s\"\r\n  }\r\n\r\n  const overlayContentStyle = {\r\n    position: \"relative\",\r\n    top: \"25%\",\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n    marginTop: \"48px\",\r\n    fontSize: \"40px\",\r\n    padding: \"0px\"\r\n  }\r\n\r\n  const buttonStyle = {\r\n    color: \"white\",\r\n    fontSize: '40px',\r\n    background: \"none\",\r\n    border: \"none\",\r\n    padding: \"0!important\",\r\n    fontFamily: \"arial, sans-serif\",\r\n    textDecoration: \"none\",\r\n    cursor: \"pointer\",\r\n  }\r\n\r\n  return (\r\n    <div style={overlayStyle}>\r\n      <div style={overlayContentStyle}>\r\n        <ul>\r\n          <ol style={overlayContentStyle}>\r\n            <button style={buttonStyle} onClick={() => window.location.reload()}>Home</button>\r\n          </ol>\r\n          <ol style={overlayContentStyle}>\r\n            <button style={buttonStyle} onClick={() => setSelection('about-me')}>About Me</button>\r\n          </ol>\r\n          <ol style={overlayContentStyle}>\r\n            <button style={buttonStyle} onClick={() => setSelection('get-in-touch')}>Get in Touch</button>\r\n          </ol>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// TODO: Move this out into a seperate component.\r\nfunction AboutMe() {\r\n  const overlayStyle = {\r\n    pointerEvents: \"auto\",\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    position: \"fixed\",\r\n    zIndex: \"1\",\r\n    top: \"0\",\r\n    left: \"0\",\r\n    backgroundImage: \"linear-gradient(90deg, #134E5E 10%, #71B280 90%)\",\r\n    color: \"white\",\r\n    overflowX: \"hidden\",\r\n    transition: \"0.1s\"\r\n  }\r\n\r\n  const imagePath = window.location.href + '/images/profile.png'\r\n\r\n  return (\r\n    <div style={overlayStyle}>\r\n      <div className='flex-container'>\r\n        <div className='flex-item-left'>\r\n          <img src={imagePath} alt=\"profile pic\" style={{borderRadius: '8px'}}/> \r\n          {/* <div style={{width: \"200px\"}}> */}\r\n            {/* <IconList /> */}\r\n          {/* </div> */}\r\n        </div>\r\n        <div className='flex-item-right'>\r\n          <p style={{ marginTop: '0px' }}>My name is Evan Daley and I'm a Lead Software Engineer at Two Barrels LLC. </p>\r\n          <p>I consider myself to be an experienced developer, leader and architect. My strongest proficiencies are system design, JavaScript, Vue, React, Rails, AWS, Docker, and SQL. </p>\r\n          <p style={{ marginBottom: '40px' }}>In my free time, I like to exercise, sleep, and dig into different technologies like R, Kubernetes, GCP, and lately, three.js. This site was built with Three.js and React. </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction GetInTouch() {\r\n  const overlayStyle = {\r\n    pointerEvents: \"auto\",\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    position: \"fixed\",\r\n    zIndex: \"1\",\r\n    top: \"0\",\r\n    left: \"0\",\r\n    color: \"white\",\r\n    overflowX: \"hidden\",\r\n    transition: \"0.1s\",\r\n    justifyContent: 'center',\r\n    dispay: \"flex\",\r\n    backgroundImage: \"linear-gradient(90deg, #134E5E 10%, #71B280 90%)\",\r\n  }\r\n\r\n  const overlayContentStyle = {\r\n    justifyContent: 'center',\r\n    display: \"flex\",\r\n    position: \"relative\",\r\n    top: \"25%\",\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n    marginTop: \"48px\",\r\n    fontSize: \"35px\",\r\n  }\r\n\r\n  return (\r\n    <div style={overlayStyle}>\r\n      <div style={overlayContentStyle}>\r\n        The best place to reach me is at<br />\r\n        daley.evan@gmail.com\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function HTMLContent() {\r\n  const [inMenu, setInMenu] = useState(false);\r\n  const [selection, setSelection] = useState('');\r\n\r\n  const handleClick = () => {\r\n    setInMenu(!inMenu)\r\n    setSelection('')\r\n  }\r\n\r\n  const headerStyle = {\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n    zIndex: \"2\",\r\n    width: \"100%\",\r\n    padding: \"40px\",\r\n    position: \"fixed\",\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div style={headerStyle}>\r\n        <div style={{ right: \"24px\", pointerEvents: \"auto\" }}>\r\n          <HamburgerButton\r\n            open={inMenu}\r\n            onClick={handleClick.bind(this)}\r\n            width={25}\r\n            height={20}\r\n            strokeWidth={2.5}\r\n            color='white'\r\n            animationDuration={0.5}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {inMenu ? <MenuContent setSelection={setSelection} /> : null}\r\n      {selection === 'about-me' ? <AboutMe /> : null}\r\n      {selection === 'get-in-touch' ? <GetInTouch /> : null}\r\n    </>\r\n  )\r\n}","import useStore from '../../store'\r\n\r\nexport default function Navigation() {\r\n  const selectScene0 = useStore(state => state.selectScene0)\r\n  const selectScene1 = useStore(state => state.selectScene1)\r\n  const selectScene2 = useStore(state => state.selectScene2)\r\n  const selectScene3 = useStore(state => state.selectScene3)\r\n\r\n  return (\r\n    <>\r\n      <div className='button-overlay'>\r\n        <div className='flex-container' style={{justifyContent: \"space-around\"}}>\r\n          <button className=\"btn\" onClick={selectScene0}>sandbox 1</button>\r\n          <button className=\"btn\" onClick={selectScene1}>sandbox 2</button>\r\n          <button className=\"btn\" onClick={selectScene2}>sandbox 3</button>\r\n          <button className=\"btn\" onClick={selectScene3}>sandbox 4</button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}","import useStore from '../../store'\r\nimport ReactPlayer from 'react-player'\r\nimport {useEffect} from 'react'\r\n\r\nexport default function Navigation() {\r\n  const videoIndex = useStore(state => state.videoIndex)\r\n  const videoPaths = useStore(state => state.videoPaths)\r\n\r\n  return (\r\n    <>\r\n      {/* <video autoPlay muted loop id=\"myVideo\" key={videoPaths[videoIndex]}>\r\n        <source src={videoPaths[videoIndex]} type=\"video/mp4\" />\r\n      </video> */}\r\n\r\n      {/* <div class=\"content\">\r\n        <h1>Heading</h1>\r\n        <p>Lorem ipsum dolor sit amet, an his etiam torquatos. Tollit soleat phaedrum te duo, eum cu recteque expetendis neglegentur. Cu mentitum maiestatis persequeris pro, pri ponderum tractatos ei. Id qui nemore latine molestiae, ad mutat oblique delicatissimi pro.</p>\r\n        <button id=\"myBtn\" onClick=\"myFunction()\">Pause</button>\r\n      </div> */}\r\n    </>\r\n  )\r\n}","// HTMLContent.js\r\n// Throw all the raw HTML content here. This is all rendered outside the context of the canvas,\r\n// so don't try to do anything fancy with Three.js.\r\n\r\nimport Menu from './Menu'\r\nimport ButtonNavigation from './ButtonNavigation'\r\nimport VideoSandbox from './VideoSandbox'\r\nimport useStore from '../../store'\r\n\r\nexport default function HTMLContent() {\r\n  return (\r\n    <>\r\n      {/*<div className=\"html-content-container\">*/}\r\n      <Menu />\r\n      <ButtonNavigation/>\r\n      <VideoSandbox />\r\n      {/*</div>*/}\r\n    </>\r\n  )\r\n}","import './App.css';\r\nimport ThreeCanvas from './components/three_components/ThreeCanvas'\r\nimport HTMLContent from './components/html_components/HTMLContent'\r\nimport React, { useState, useEffect } from 'react';\r\nimport mouseState from './mouseState';\r\nimport useStore from './store.js'\r\n\r\nfunction App() {\r\n  const onDocumentPointerMove = (e) => {\r\n    mouseState.mouse = [(e.clientX / window.innerWidth) * 2 - 1, (e.clientY / window.innerHeight) * 2 - 1]\r\n  }\r\n\r\n  const switchVideos = useStore(state => state.switchVideos)\r\n  const videoIndex = useStore(state => state.videoIndex)\r\n  const videoPaths = useStore(state => state.videoPaths)\r\n\r\n  const onDocumentClick = (e) => {\r\n    switchVideos()\r\n  }\r\n\r\n  onDocumentClick.bind(this)\r\n\r\n  useEffect(() => {\r\n    // document.addEventListener('click', onDocumentClick, false);\r\n    // document.addEventListener('mousemove', onDocumentPointerMove, false);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <HTMLContent/>\r\n      <ThreeCanvas/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}